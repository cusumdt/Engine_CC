#include "Renderer.h"
#include "BaseGame.h"
#include <fstream>
#include <sstream>



using namespace Graficos1;

enum ShaderType
{
	NONE = -1,
	VERTEX = 0,
	FRAGMENT = 1
};

Renderer::Renderer()
{
	_red = 0;
	_green = 0;
	_blue = 0;
	_alpha = 0;
}

ShaderProgramSource Renderer::ShaderParser(const string& filepath)
{
	ifstream stream(filepath);

	string line;
	stringstream ss[2];
	ShaderType type = ShaderType::NONE;

	while (getline(stream, line))
	{
		if (line.find("#shader") != string::npos)
		{
			if (line.find("vertex") != string::npos)
			{
				type = ShaderType::VERTEX;
			}
			else if (line.find("fragment") != string::npos)
			{
				type = ShaderType::FRAGMENT;
			}
		}
		else
		{
			ss[(int)type] << line << "\n";
		}
	}

	return { ss[0].str(), ss[1].str() };

}

unsigned int Renderer::CompileShader(unsigned int type,const string& source)
{
	unsigned int id = glCreateShader(type);
	const char* src = source.c_str();
	glShaderSource(id, 1, &src, nullptr);
	glCompileShader(id);

	int result;
	glGetShaderiv(id, GL_COMPILE_STATUS, &result);

	if (result == GL_FALSE)
	{
		int length;
		glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);
		char* message = (char*)_malloca(length * sizeof(char));
		glGetShaderInfoLog(id, length, &length, message);
		cout << "Failed to compile " << (type == GL_VERTEX_SHADER ? "vertex" : "fragment") << " shader!" << endl;
		cout << message << endl;
		glDeleteShader(id);
		return 0;
	}

	return id;
}

unsigned int Renderer::CreateShader(const string& vertexShader, const string& fragmentShader)
{
	unsigned int program = glCreateProgram();
	unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader);
	unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader);

	glAttachShader(program, vs);
	glAttachShader(program, fs);
	glLinkProgram(program);
	glValidateProgram(program);

	glDeleteShader(vs);
	glDeleteShader(fs);

	return program;
}

void Renderer::SetBackgroundColors(Color backgroundColor)
{
	float red = backgroundColor.GetRed() * RGBTODECIMAL;
	float green = backgroundColor.GetGreen() * RGBTODECIMAL;
	float blue = backgroundColor.GetBlue() * RGBTODECIMAL;
	float alpha = backgroundColor.GetAlpha() * RGBTODECIMAL;

	color.SetColor(red, green, blue, alpha);
}

void Renderer::ChangeBackgroundColor()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glClearColor(color.GetRed(), color.GetGreen(), color.GetBlue(), color.GetAlpha());
}
<<<<<<< .merge_file_a03772

void Renderer::SetTriangle(Color triangleColor)
{
	Vector2 triangleVertexes[3];
	triangleVertexes[0] = { -0.5f,-0.5f };
	triangleVertexes[1] = {  0.5f,-0.5f };
	triangleVertexes[2] = {  0.0f, 0.5f };

	float red = triangleColor.GetRed() * RGBTODECIMAL;
	float green = triangleColor.GetGreen() * RGBTODECIMAL;
	float blue = triangleColor.GetBlue() * RGBTODECIMAL;
	float alpha = triangleColor.GetAlpha() * RGBTODECIMAL;

	glGenVertexArrays(1, &VertexArrayID);
	glBindVertexArray(VertexArrayID);

	static const GLfloat g_vertex_buffer_data[] = 
	{
		   triangleVertexes[0].x, triangleVertexes[0].y, red, green, blue, alpha,
		   triangleVertexes[1].x, triangleVertexes[1].y, red, green, blue, alpha,
		   triangleVertexes[2].x, triangleVertexes[2].y, red, green, blue, alpha,
	};

	// Identificar el vertex buffer
	// Generar un buffer, poner el resultado en el vertexbuffer que acabamos de crear
	glGenBuffers(1, &VertexBuffer);
	// Los siguientes comandos le darán características especiales al 'vertexbuffer' 
	glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
	// Darle nuestros vértices a  OpenGL.
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);

	// Create an element array
	GLuint ebo;
	glGenBuffers(1, &ebo);

	GLuint elements[] = 
	{
		0, 1, 2
	};

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(elements), elements, GL_STATIC_DRAW);

	ShaderProgramSource source = ShaderParser("res/shaders/Shape.shader");
	shader = CreateShader(source.vertexSource,source.fragmentSource);
	glUseProgram(shader);

	// Specify the layout of the vertex data
	GLint posAttrib = glGetAttribLocation(shader, "position");
	glEnableVertexAttribArray(posAttrib);
	glVertexAttribPointer(posAttrib, 2, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), 0);

	GLint colAttrib = glGetAttribLocation(shader, "color");
	glEnableVertexAttribArray(colAttrib);
	glVertexAttribPointer(colAttrib, 4, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (void*)(2 * sizeof(GLfloat)));

	uniModel = glGetUniformLocation(shader, "myMatrix");
	myMatrix = glm::translate(glm::vec3(0.0f, 0.0f, 0.0f));
	glUniformMatrix4fv(uniModel, 1, GL_FALSE, glm::value_ptr(myMatrix));

	

}

void Renderer::DrawTriangle()
{
	// Draw a triangles using 3 indices
	myMatrix = glm::rotate(myMatrix,glm::radians(0.5f), glm::vec3(0.0f, 0.0f, 1.0f));
	glUniformMatrix4fv(uniModel, 1, GL_FALSE, glm::value_ptr(myMatrix));
	glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0);
}
=======
>>>>>>> .merge_file_a04048
