#include "Window.h"
#include "BaseGame.h"
#include "Renderer.h"
#include "Shape.h"
#include "Triangle.h"
#include "Input.h"

using namespace Graficos1;

Triangle aTriangle;

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
	/*if (key == GLFW_KEY_E && action == GLFW_PRESS)
	{
		aTriangle.scale(glm::vec3(1.01f, 1.01f, 1.01f));
	}*/

	switch (key)
	{
	case GLFW_KEY_E:
		aTriangle.scale(glm::vec3(1.01f, 1.01f, 1.01f));
		break;
	case GLFW_KEY_W:
		aTriangle.translate(glm::vec3(.0f, .01f, .0f));
		break;
	case GLFW_KEY_S:
		aTriangle.translate(glm::vec3(.0f, -.01f, .0f));
		break;
	case GLFW_KEY_A:
		aTriangle.translate(glm::vec3(.01f, .0f, .0f));
		break;
	case GLFW_KEY_D:
		aTriangle.translate(glm::vec3(-.01f, .0f, .0f));
		break;

	default:
		break;
	}
	
}

bool Window::Open(int width, int height, const char windowName[12])
{
	Input input;
	ColorList colors;
	Color triangleColor = colors.Cyan;
	
	/* Initialize the library */
	if (!glfwInit())
		return false;

	/* Create a windowed mode window and its OpenGL context */
	window = glfwCreateWindow(width, height, windowName, NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return false;
	}

	glfwSetKeyCallback(window, key_callback);

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	GLenum err = glewInit();
	if (GLEW_OK != err)
	{
		/* Problem: glewInit failed, something is seriously wrong. */
		fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
	}
	fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));

	
	aTriangle.currentRenderer = windowRenderer;
	aTriangle.set(triangleColor);

	int state;
	int state2;
	int states[2];

	input.setWindow(window);

	while (!glfwWindowShouldClose(window))
	{
		/* Render here */
		windowRenderer.ChangeBackgroundColor();

		aTriangle.draw();

<<<<<<< HEAD

		if (input.GetInput(GLFW_KEY_E))
		{
			windowRenderer.SetBackgroundColors(colors.Blue);
			aTriangle.rotate(1, glm::vec3(0.0f, 0.0f, 1.0f));
		}
		 
		if (input.GetInput(GLFW_KEY_Q))
		{
			windowRenderer.SetBackgroundColors(colors.Pink);
			aTriangle.rotate(-1, glm::vec3(0.0f, 0.0f, 1.0f));
		}
=======
		//state = glfwGetKey(window, GLFW_KEY_E);

		//if (state == GLFW_PRESS)
		//{
		//	//windowRenderer.SetBackgroundColors(colors.Blue);
		//	aTriangle.scale(glm::vec3(1.01f,1.01f,1.01f));
		//}

		//glfwSetKeyCallback(window, key_callback);
>>>>>>> d1bc1c006e301f2936cabcd22cbc742ab1319170

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();
	}

	glDeleteProgram(aTriangle.GetShader());

	glfwTerminate();
}

void Window::setRenderer(Renderer newRenderer)
{
	windowRenderer = newRenderer;
}

GLFWwindow* Window::getWindow()
{
	return window;
}