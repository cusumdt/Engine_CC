#include "Triangle.h"
#include <fstream>
#include <sstream>
#include "BaseGame.h"
#include "stb_image.h"

using namespace Graficos1;

unsigned int CreateTexture(const char* path, GLenum type,bool flip)
{
	int width;
	int height;
	int nrChannels;
	unsigned char *data = stbi_load(path, &width, &height, &nrChannels, 0);

	unsigned int texture;
	glGenTextures(1, &texture);
	glActiveTexture(GL_TEXTURE0); // activate the texture unit first before binding texture
	glBindTexture(GL_TEXTURE_2D, texture);
	if (data)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, type, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}

	stbi_set_flip_vertically_on_load(flip);

	stbi_image_free(data);

	return texture;
}

Triangle::Triangle()
{
	VertexArrayID = 0;
	VertexBuffer = 0;
	shader = 0;
}

Triangle::Triangle(int newx, int newy)
{
	moveTo(newx, newy);
	VertexArrayID = 0;
	VertexBuffer = 0;
	shader = 0;
}

Triangle::Triangle(float newx, float newy)
{
	moveTo(newx, newy);
	VertexArrayID = 0;
	VertexBuffer = 0;
	shader = 0;
}

Triangle::Triangle(Vector2 v)
{
	vec.x = v.x;
	vec.y = v.y;
	VertexArrayID = 0;
	VertexBuffer = 0;
	shader = 0;
}

void Triangle::set(Color triangleColor)
{
	texture1 = CreateTexture("res/textures/container.jpg",GL_RGB,false);
	texture2 = CreateTexture("res/textures/Boca_escudo.png", GL_RGBA,false);

	float texCoords[] = 
	{
		0.0f, 0.0f,  // lower-left corner  
		1.0f, 0.0f,  // lower-right corner
		0.5f, 1.0f   // top-center corner
	};

	Vector2 triangleVertexes[3];
	triangleVertexes[0] = { -0.5f, -0.5f };
	triangleVertexes[1] = { 0.5f, -0.5f };
	triangleVertexes[2] = { 0.0f, 0.5f };

	float red = triangleColor.GetRed() * RGBTODECIMAL;
	float green = triangleColor.GetGreen() * RGBTODECIMAL;
	float blue = triangleColor.GetBlue() * RGBTODECIMAL;
	float alpha = triangleColor.GetAlpha() * RGBTODECIMAL;

	glGenVertexArrays(1, &VertexArrayID);
	glBindVertexArray(VertexArrayID);

	static const GLfloat g_vertex_buffer_data[] =
	{
		   triangleVertexes[0].x, triangleVertexes[0].y, red, green, blue, alpha, 0.0f, 0.0f,
		   triangleVertexes[1].x, triangleVertexes[1].y, red, green, blue, alpha, 1.0f, 0.0f,
		   triangleVertexes[2].x, triangleVertexes[2].y, red, green, blue, alpha, 0.5f, 1.0f
	};

	// Identificar el vertex buffer
	// Generar un buffer, poner el resultado en el vertexbuffer que acabamos de crear
	glGenBuffers(1, &VertexBuffer);
	// Los siguientes comandos le darán características especiales al 'vertexbuffer' 
	glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
	// Darle nuestros vértices a  OpenGL.
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);

	// Create an element array
	GLuint ebo;
	glGenBuffers(1, &ebo);

	GLuint elements[] =
	{
		0, 1, 2
	};

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(elements), elements, GL_STATIC_DRAW);

	ShaderProgramSource source = currentRenderer.ShaderParser("res/shaders/Shape.shader");
	shader = currentRenderer.CreateShader(source.vertexSource, source.fragmentSource);
	glUseProgram(shader);

	// Specify the layout of the vertex data
	GLint posAttrib = glGetAttribLocation(shader, "position");
	glEnableVertexAttribArray(posAttrib);
	glVertexAttribPointer(posAttrib, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), 0);

	GLint colAttrib = glGetAttribLocation(shader, "color");
	glEnableVertexAttribArray(colAttrib);
	glVertexAttribPointer(colAttrib, 4, GL_FLOAT, GL_FALSE, 8 * sizeof(GLfloat), (void*)(2 * sizeof(GLfloat)));

	GLint texAttrib = glGetAttribLocation(shader, "texturePos");
	glEnableVertexAttribArray(texAttrib);
	glVertexAttribPointer(texAttrib, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	

	uniModel = glGetUniformLocation(shader, "model");
	model = glm::translate(glm::vec3(0.0f, 0.0f, 0.0f));
	glUniformMatrix4fv(uniModel, 1, GL_FALSE, glm::value_ptr(model));

	view = glm::lookAt(
		glm::vec3(0.0f, 0.0f, -2.0f), // position
		glm::vec3(0.0f, 0.0f, 0.0f), // look at
		glm::vec3(0.0f, 1.0f, 0.0f)  // up
	);

	GLint uniView = glGetUniformLocation(shader, "view");
	glUniformMatrix4fv(uniView, 1, GL_FALSE, glm::value_ptr(view));
	
	proj = glm::ortho(
		-1.0f,
		1.f,
		-1.f,
		1.0f,
		0.0f,
		100.f
	);
	GLint uniProj = glGetUniformLocation(shader, "proj");
	glUniformMatrix4fv(uniProj, 1, GL_FALSE, glm::value_ptr(proj));

	glUniform1i(glGetUniformLocation(shader, "texture1"), 0); // set it manually
	glUniform1i(glGetUniformLocation(shader, "texture2"), 1); // set it manually
}

void Triangle::draw()
{
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture1);
	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, texture2);
	glUniformMatrix4fv(uniModel, 1, GL_FALSE, glm::value_ptr(model));
	glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0);
<<<<<<< HEAD
}
=======
}
>>>>>>> d1bc1c006e301f2936cabcd22cbc742ab1319170
